// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pronostico.Data;

#nullable disable

namespace Pronostico.Data.Migrations
{
    [DbContext(typeof(PronosticoSaisonContext))]
    [Migration("20240413203920_EquipeDeCoeurFacultatif")]
    partial class EquipeDeCoeurFacultatif
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pronostico.Data.Entities.Equipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accronyme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomCourt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equipes");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.EquipeSaison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.Property<int>("SaisonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.HasIndex("SaisonId");

                    b.ToTable("EquipeSaison");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.Joueur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipeId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surnom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.ToTable("Joueurs");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.JoueurSaison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("JoueurId")
                        .HasColumnType("int");

                    b.Property<int>("SaisonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JoueurId");

                    b.HasIndex("SaisonId");

                    b.ToTable("JoueurSaison");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.Journee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SaisonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaisonId");

                    b.ToTable("Journee");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<int>("DateHM")
                        .HasColumnType("int");

                    b.Property<int>("EquipeDomId")
                        .HasColumnType("int");

                    b.Property<int>("EquipeExtId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMatch2Pts")
                        .HasColumnType("bit");

                    b.Property<int?>("JourneeId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("TypResultat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipeDomId");

                    b.HasIndex("EquipeExtId");

                    b.HasIndex("JourneeId");

                    b.HasIndex("MatchId");

                    b.ToTable("Matchs");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.Saison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DateDebut")
                        .HasColumnType("int");

                    b.Property<int>("DateFin")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Saisons");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.EquipeSaison", b =>
                {
                    b.HasOne("Pronostico.Data.Entities.Equipe", "Equipe")
                        .WithMany()
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pronostico.Data.Entities.Saison", "Saison")
                        .WithMany("Equipes")
                        .HasForeignKey("SaisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipe");

                    b.Navigation("Saison");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.Joueur", b =>
                {
                    b.HasOne("Pronostico.Data.Entities.Equipe", "EquipeDeCoeur")
                        .WithMany()
                        .HasForeignKey("EquipeId");

                    b.Navigation("EquipeDeCoeur");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.JoueurSaison", b =>
                {
                    b.HasOne("Pronostico.Data.Entities.Joueur", "Joueur")
                        .WithMany()
                        .HasForeignKey("JoueurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pronostico.Data.Entities.Saison", "Saison")
                        .WithMany("Joueurs")
                        .HasForeignKey("SaisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Joueur");

                    b.Navigation("Saison");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.Journee", b =>
                {
                    b.HasOne("Pronostico.Data.Entities.Saison", "Saison")
                        .WithMany("Calendrier")
                        .HasForeignKey("SaisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Saison");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.Match", b =>
                {
                    b.HasOne("Pronostico.Data.Entities.Equipe", "EquipeDom")
                        .WithMany()
                        .HasForeignKey("EquipeDomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pronostico.Data.Entities.Equipe", "EquipeExt")
                        .WithMany()
                        .HasForeignKey("EquipeExtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pronostico.Data.Entities.Journee", null)
                        .WithMany("Matchs")
                        .HasForeignKey("JourneeId");

                    b.HasOne("Pronostico.Data.Entities.Match", null)
                        .WithMany("Pronos")
                        .HasForeignKey("MatchId");

                    b.Navigation("EquipeDom");

                    b.Navigation("EquipeExt");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.Journee", b =>
                {
                    b.Navigation("Matchs");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.Match", b =>
                {
                    b.Navigation("Pronos");
                });

            modelBuilder.Entity("Pronostico.Data.Entities.Saison", b =>
                {
                    b.Navigation("Calendrier");

                    b.Navigation("Equipes");

                    b.Navigation("Joueurs");
                });
#pragma warning restore 612, 618
        }
    }
}
